{"version":3,"sources":["api.ts","context/myContext.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortType","MyContext","createContext","undefined","useMyContext","context","useContext","Error","TodoContextProvider","children","useState","todosFromServer","setAllTodos","filteredTodos","setFilteredTodos","isLoading","setIsLoading","query","setQuery","sortType","setSortType","activeUser","setActiveUser","isUserLoading","setIsUserLoading","activeTodo","setActiveTodo","useEffect","allTodos","finally","userId","modifiedTodo","ALL","ACTIVE","filter","todo","completed","COMPLETED","modifiedValue","toLocaleLowerCase","filtered","title","includes","contextValue","todos","setTodos","TodosFromServer","Provider","value","List","setIsTodo","className","map","id","type","onClick","TodoList","React","memo","TodoFilter","onChange","event","target","placeholder","style","pointerEvents","Loader","Modal","href","email","name","TodoModal","App","isTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fa90d4e.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, {\n  createContext, useContext, useEffect, useState, ReactNode,\n} from 'react';\nimport { getTodos, getUser } from '../api';\nimport { User } from '../types/User';\nimport { Todo } from '../types/Todo';\n\ninterface MyContextProps {\n  todos: Todo[];\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n  TodosFromServer: Todo[];\n  isLoading: boolean;\n  query: string;\n  setQuery: React.Dispatch<React.SetStateAction<string>>;\n  sortType: string | null,\n  setSortType: React.Dispatch<React.SetStateAction<string>>;\n  activeUser: User | null;\n  setActiveUser: React.Dispatch<React.SetStateAction<User | null>>;\n  isUserLoading: boolean;\n  setIsUserLoading: React.Dispatch<React.SetStateAction<boolean>>\n  activeTodo: Todo | null\n  setActiveTodo: React.Dispatch<React.SetStateAction<Todo | null>>\n}\n\nconst MyContext = createContext<MyContextProps | undefined>(undefined);\n\ninterface TodoContextProviderProps {\n  children: ReactNode;\n}\n\nenum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nconst TodoContextProvider: React.FC<TodoContextProviderProps>\n= ({ children }) => {\n  const [todosFromServer, setAllTodos] = useState<Todo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [query, setQuery] = useState<string>('');\n  const [sortType, setSortType] = useState<string>('all');\n  const [activeUser, setActiveUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(true);\n  const [activeTodo, setActiveTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then((allTodos: Todo[]) => {\n        setAllTodos(allTodos);\n        setFilteredTodos(allTodos);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n    if (activeTodo?.userId) {\n      getUser(activeTodo?.userId)\n        .then(setActiveUser)\n        .finally(() => {\n          setIsUserLoading(false);\n        });\n    }\n  }, [activeTodo]);\n\n  useEffect(() => {\n    let modifiedTodo: Todo[] = [];\n\n    switch (sortType) {\n      case SortType.ALL:\n        modifiedTodo = todosFromServer;\n        break;\n      case SortType.ACTIVE:\n        modifiedTodo = todosFromServer.filter((todo) => !todo.completed);\n        break;\n      case SortType.COMPLETED:\n        modifiedTodo = todosFromServer.filter((todo) => todo.completed);\n        break;\n      default:\n        break;\n    }\n\n    const modifiedValue = query.toLocaleLowerCase();\n\n    const filtered = modifiedTodo.filter((todo) => {\n      return todo.title.toLocaleLowerCase().includes(modifiedValue);\n    });\n\n    setFilteredTodos(filtered);\n  }, [query, sortType, todosFromServer]);\n\n  const contextValue: MyContextProps = {\n    todos: filteredTodos,\n    setTodos: setFilteredTodos,\n    TodosFromServer: todosFromServer,\n    isLoading,\n    query,\n    setQuery,\n    sortType,\n    setSortType,\n    activeUser,\n    setActiveUser,\n    isUserLoading,\n    setIsUserLoading,\n    activeTodo,\n    setActiveTodo,\n  };\n\n  return (\n    <MyContext.Provider value={contextValue}>\n      {children}\n    </MyContext.Provider>\n  );\n};\n\nexport const useMyContext = () => {\n  const context = useContext(MyContext);\n\n  if (!context) {\n    throw new Error('');\n  }\n\n  return context;\n};\n\nexport default TodoContextProvider;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { useMyContext } from '../../context/myContext';\n\ninterface TodoListProps {\n  setIsTodo: Dispatch<SetStateAction<boolean>>;\n}\n\nconst List: React.FC<TodoListProps> = (\n  { setIsTodo },\n) => {\n  const {\n    todos, activeTodo, setActiveTodo,\n  } = useMyContext();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos?.map(todo => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setActiveTodo(todo);\n                  setIsTodo(true);\n                }}\n              >\n                {activeTodo?.id === todo.id ? (\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                )\n                  : (\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  )}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport const TodoList = React.memo(List);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { useMyContext } from '../../context/myContext';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, setQuery, setSortType } = useMyContext();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setSortType(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Loader } from '../Loader';\nimport { useMyContext } from '../../context/myContext';\n\ninterface TodoModalProps {\n  setIsTodo: Dispatch<SetStateAction<boolean>>;\n}\n\nconst Modal: React.FC<TodoModalProps> = (\n  { setIsTodo },\n) => {\n  const {\n    activeUser, isUserLoading, activeTodo, setActiveTodo, setActiveUser,\n  } = useMyContext();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${activeTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setIsTodo(false);\n                setActiveTodo(null);\n                setActiveUser(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {activeTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {activeTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${activeUser?.email}`}>\n                {activeUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const TodoModal = React.memo(Modal);\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport TodoContextProvider, { useMyContext } from './context/myContext';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const { isLoading } = useMyContext();\n  const [isTodo, setIsTodo] = useState<boolean>(false);\n\n  return (\n    <TodoContextProvider>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              <TodoList\n                setIsTodo={setIsTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {isTodo\n        && (\n          <TodoModal\n            setIsTodo={setIsTodo}\n          />\n        )}\n    </TodoContextProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport TodoContextProvider from './context/myContext';\n\nReactDOM.render(\n  <TodoContextProvider>\n    <App />\n  </TodoContextProvider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}